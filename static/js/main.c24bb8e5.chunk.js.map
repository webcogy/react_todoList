{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","reportWebVitals.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","Error","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","useTodoDispatch","TodoHeadBlock","TodoHead","undoneTasks","today","Date","toLocaleDateString","year","month","day","weekday","className","length","CheckCircle","props","css","Text","Remove","TodoItemBlock","TodoItem","onClick","TodoListBlock","TodoList","todos","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","TodoCreate","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","placeholder","autoFocus","onChange","target","React","memo","GlobalStyle","createGlobalStyle","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c24bb8e5.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div`\r\n    width:512px;\r\n    height:768px;\r\n\r\n    position:relative;\r\n    background:white;\r\n    border-radius:5px;\r\n    box-shadow:0 0 8px rgba(0,0,0, 0.04);\r\n\r\n    margin:0 auto;\r\n    margin-top:96px;\r\n    margin-bottom:32px;\r\n\r\n    display:flex;\r\n    flex-direction:column;\r\n`;\r\n\r\nfunction TodoTemplate({ children }) {\r\n    return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n    {\r\n        id:1,\r\n        text:'프로젝트 생성하기',\r\n        done:true,\r\n    },\r\n    {\r\n        id:2,\r\n        text:'프로젝트 스타일링하기',\r\n        done:true,\r\n    },\r\n    {\r\n        id:3,\r\n        text:'Context 만들기',\r\n        done:false,\r\n    },\r\n    {\r\n        id:4,\r\n        text:'기능 구현하기',\r\n        done:false,\r\n    },\r\n];\r\n\r\n/**\r\n * CREATE\r\n * TOGGLE\r\n * REMOVE\r\n * */\r\n\r\nfunction todoReducer(state, action) {\r\n    switch(action.type){\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n        case 'TOGGLE':\r\n            return state.map(\r\n                todo => todo.id === action.id ? {...todo, done: !todo.done} : todo\r\n            );\r\n        case 'REMOVE':\r\n            return state.filter(todo => todo.id !== action.id);\r\n        default: // 에러 발생 시\r\n            throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n} \r\n\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n\r\nexport function TodoProvider({ children }){\r\n    const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n    const nextId = useRef(5);\r\n\r\n    //context를 아래와 같이 사용하면 관리하기가 용이함.\r\n    return (\r\n        <TodoStateContext.Provider value={state}>\r\n            <TodoDispatchContext.Provider value={dispatch}>\r\n                <TodoNextIdContext.Provider value={nextId}>\r\n                    {children}\r\n                </TodoNextIdContext.Provider>\r\n            </TodoDispatchContext.Provider>\r\n        </TodoStateContext.Provider>\r\n    );\r\n}\r\n\r\nexport function useTodoState(){\r\n    const context = useContext(TodoStateContext);\r\n    if(!context){ // context 가 없을 경우 처리\r\n        throw new Error('Cannot find TodoProvider')\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoDispatch(){\r\n    const context = useContext(TodoDispatchContext);\r\n    if(!context){\r\n        throw new Error('Cannot find TodoProvider')\r\n    }\r\n    return context;\r\n}\r\n\r\nexport function useTodoNextId(){\r\n    const context = useContext(TodoNextIdContext);\r\n    if(!context){\r\n        throw new Error('Cannot find TodoProvider')\r\n    }\r\n    return context;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoHeadBlock = styled.div`\r\n    padding-top:48px;\r\n    padding-left:32px;\r\n    padding-right:32px;\r\n    padding-bottom:48px;\r\n    border-bottom:1px solid #e9ecef;\r\n\r\n    h1 {\r\n        margin:0;\r\n        font-size:36px;\r\n        color:#343a40;\r\n    }\r\n\r\n    .day {\r\n        margin-top:4px;\r\n        color:#868e96;\r\n        font-size:21px;\r\n    }\r\n\r\n    .tasks-left {\r\n        color:#20c997;\r\n        font-size:18px;\r\n        margin-top:40px;\r\n        font-weight:bold;\r\n    }\r\n`;\r\n\r\nfunction TodoHead() {\r\n    const todos = useTodoState();\r\n    const undoneTasks = todos.filter(todo => !todo.done);\r\n\r\n    const today = new Date();\r\n    const dateString = today.toLocaleDateString('ko-KR', {\r\n        year:'numeric',\r\n        month:'long',\r\n        day:'numeric'\r\n    });\r\n    const dayName = today.toLocaleDateString('ko-KR', {\r\n        weekday:'long'\r\n    });\r\n\r\n    return (\r\n        <TodoHeadBlock>\r\n            <h1>2020년 01월 10일</h1>\r\n            <div className=\"day\">일요일</div>            \r\n            <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>            \r\n        </TodoHeadBlock>\r\n    )\r\n}\r\n\r\nexport default TodoHead;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdDone, MdDelete } from 'react-icons/md';\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\nconst CheckCircle = styled.div`\r\n    width:32px;\r\n    height:32px;\r\n    border-radius: 16px;\r\n    border:1px solid #ced4da;\r\n    font-size:24px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n    margin-right:20px;\r\n    cursor:pointer;\r\n    ${props => props.done && css`\r\n        border:1px solid #38d9a9;\r\n        color:#38d9a9;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n    flex:1;\r\n    font-size:21px;\r\n    color:#495057;\r\n    ${props => props.done && css`\r\n        color:#ced4da;\r\n    `}\r\n`;\r\n\r\nconst Remove = styled.div`\r\n    opacity:0;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n    color:#dee2e6;\r\n    font-size:24px;\r\n    cursor:pointer;\r\n    &:hover {\r\n        color:#ff6b6b;\r\n    }\r\n`;\r\n\r\nconst TodoItemBlock = styled.div`\r\n    display:flex;\r\n    align-items:center;\r\n    padding-top:12px;\r\n    padding-bottom:12px;\r\n    &:hover {\r\n        ${Remove} {\r\n            opacity:1;\r\n        }\r\n    }\r\n`;\r\n\r\nfunction TodoItem({ id, done, text }) {\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () => dispatch({\r\n        type:'TOGGLE',\r\n        id\r\n    });\r\n    const onRemove = () => dispatch({\r\n        type:'REMOVE',\r\n        id\r\n    });\r\n\r\n    return (\r\n        <TodoItemBlock>\r\n            <CheckCircle done={done} onClick={onToggle}>\r\n                {done && <MdDone />}\r\n            </CheckCircle>\r\n            <Text done={done}>{text}</Text>\r\n            <Remove onClick={onRemove}>\r\n                <MdDelete />\r\n            </Remove>\r\n        </TodoItemBlock>\r\n    );\r\n}\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport {useTodoState} from '../TodoContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n    flex: 1;\r\n    padding:20px 32px;\r\n    padding-bottom:48px;\r\n    overflow-y:auto;\r\n`;\r\n\r\nfunction TodoList() {\r\n    const todos = useTodoState();\r\n    return (\r\n        <TodoListBlock>\r\n            {todos.map(todo => (\r\n                <TodoItem\r\n                    key={todo.id}\r\n                    id={todo.id}\r\n                    text={todo.text}\r\n                    done={todo.done}\r\n                />\r\n            ))}\r\n        </TodoListBlock>\r\n    );\r\n}\r\n\r\nexport default TodoList;\r\n","import React, { useState } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\n\r\nconst CircleButton = styled.button`\r\n    background:#38d9a9;\r\n    &:hover{\r\n        background:#63e6be;\r\n    }\r\n    &:active {\r\n        background:#20c997;\r\n    }\r\n\r\n    z-index: 5;\r\n    cursor:pointer;\r\n    width:80px;\r\n    height:80px;\r\n    display:flex;\r\n    align-items:center;\r\n    justify-content:center;\r\n\r\n    position:absolute;\r\n    left:50%;\r\n    bottom:0;\r\n    transform:translate(-50%, 50%);\r\n\r\n    font-size:60px;\r\n    color:white;\r\n    border-radius:40px;\r\n\r\n    border:none;\r\n    outline:none;\r\n\r\n    transition:0.125s all ease-in;\r\n    ${props => props.open && css`\r\n        background:#ff6b6b;\r\n        &:hover {\r\n            background:#ff8787;\r\n        }\r\n        &:active {\r\n            background:#fa5252;\r\n        }\r\n        transform :translate(-50%, 50%) rotate(45deg);\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div`\r\n    width:100%;\r\n    bottom:0;\r\n    left:0;\r\n    position:absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n    background:#f8f9fa;\r\n    padding:32px;\r\n    padding-bottom:72px;\r\n    border-bottom-left-radius:16px;\r\n    border-bottom-right-radius:16px;\r\n    border-top:1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n    padding:12px;\r\n    border-radius:4px;\r\n    border:1px solid #dee2e6;\r\n    width:100%;\r\n    outline:none;\r\n    font-size:18px;\r\n    box-sizing:border-box;\r\n`;\r\n\r\n\r\nfunction TodoCreate() {\r\n    const [open, setOpen] = useState(false);\r\n    const [value, setValue] = useState('');\r\n    const dispatch = useTodoDispatch();\r\n    const nextId = useTodoNextId();\r\n\r\n    const onToggle = () => setOpen(!open);\r\n    const onChange = (e) => setValue(e.target.value);\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        dispatch({\r\n            type:'CREATE',\r\n            todo:{\r\n                id:nextId.current,\r\n                text:value,\r\n                done:false\r\n            }\r\n        });\r\n        setValue('');\r\n        setOpen(false);\r\n        nextId.current += 1;\r\n    };\r\n\r\n\r\n    return (\r\n        <>\r\n        {open && (\r\n            <InsertFormPositioner>\r\n                <InsertForm onSubmit={onSubmit}>\r\n                    <Input \r\n                        placeholder=\"할 일을 입력 후, Enter 를 누르세요\" \r\n                        autoFocus\r\n                        onChange={onChange}\r\n                        value={value}\r\n                    />\r\n                </InsertForm>\r\n            </InsertFormPositioner> \r\n        )}\r\n        <CircleButton onClick={onToggle} open={open}>\r\n            <MdAdd />\r\n        </CircleButton>\r\n        </>\r\n    )\r\n\r\n}\r\n\r\n// React.memo 로 성능 최적화\r\nexport default React.memo(TodoCreate);\r\n","import React from 'react';\r\nimport { createGlobalStyle } from 'styled-components';\r\nimport TodoTemplate from './components/TodoTemplate';\r\nimport TodoHead from './components/TodoHead';\r\nimport TodoList from './components/TodoList';\r\nimport TodoCreate from './components/TodoCreate';\r\nimport { TodoProvider } from './TodoContext';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n    background:#e9ecef;\r\n  }\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <TodoProvider>\r\n      <GlobalStyle />\r\n      <TodoTemplate>\r\n        <TodoHead />\r\n        <TodoList />\r\n        <TodoCreate />\r\n      </TodoTemplate>\r\n    </TodoProvider>\r\n  );\r\n}\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}